using System;
using KrillAudio.Krilloud.Exceptions;
using KrillAudio.Krilloud.Services;
using KrillAudio.Krilloud.Utils;
using UnityEngine;

namespace KrillAudio.Krilloud
{
	
	[AddComponentMenu("")]
	[DisallowMultipleComponent]
	public sealed class KLCenter : MonoBehaviour
	{
#if KRILLOUD_DEBUG
		private static bool Verbose = true;
#else
		private static bool Verbose = false;
#endif
		private static KLCenter m_instance;
		public static KLCenter Instance
		{
			get
			{
				if (m_applicationQuit || !Application.isPlaying) return m_instance;

				if (m_instance == null)
				{
					m_instance = FindObjectOfType<KLCenter>();
				}

				if (m_instance == null)
				{
					var go = new GameObject("[AUTOGENERATED] KLCenter");
					m_instance = go.AddComponent<KLCenter>();

					if (!m_instance.Initialized) m_instance.Init();
				}

				return m_instance;
			}
		}

		private static bool m_applicationQuit;

		private Krilloud m_engine;

		#region Properties

		public bool Initialized { get; private set; }

		#endregion Properties

		#region Unity Events

		private void Awake()
		{
			if (Instance != this)
			{
				enabled = false;
				return;
			}

			DontDestroyOnLoad(this);

			Init();
		}

		private void OnDestroy()
		{
			if (Initialized)
			{
				Deinit();
			}
		}

		private void OnApplicationQuit()
		{
			m_applicationQuit = true;
		}

		#endregion Unity Events

		#region Public static API

		public static bool IsKrilloudPaused()
		{
			return (Instance != null) ? Instance.IsKrilloudPausedInternal() : false;
		}

		public static void PauseKrilloud()
		{
			if (Instance != null)
			{
				Instance.PauseKrilloudInternal();
			}
		}

		public static void ResumeKrilloud()
		{
			if (Instance != null)
			{
				Instance.ResumeKrilloudInternal();
			}
		}

		#endregion Public static API

		#region Internal API

		internal void LoadTag(string[] tags, int instanceId)
		{
			if (m_applicationQuit)
			{
				Log("Application is quitting, ignoring LoadTag(tags: {0}, instanceId: {1})", tags.Length, instanceId);
				return;
			}

			ThrowExceptionIfKrilloudIsNotInitialized();

			Log("EX_{0}(tags: {1}, id: {2})", nameof(m_engine.LoadTag), tags.Length, instanceId);
			m_engine.LoadTag(tags, instanceId);
		}

		internal void UnloadObject(int instanceId)
		{
			if (m_applicationQuit)
			{
				Log("Application is quitting, ignoring UnloadObject(instanceId: {0})", instanceId);
				return;
			}

			ThrowExceptionIfKrilloudIsNotInitialized();

			Log("EX_{0}(instanceId: {1})", nameof(m_engine.UnloadObject), instanceId);
			m_engine.UnloadObject(instanceId);
		}

		internal int GetIntVar(string varName, int instanceId = -1)
		{
			ThrowExceptionIfKrilloudIsNotInitialized();

			int result = 0;

			Log("EX_{0}(varName: {1}, instanceId: {2})", nameof(m_engine.GetVariableValue), varName, instanceId);
			m_engine.GetVariableValue(varName, instanceId, ref result);

			return result;
		}

		internal float GetFloatVar(string varName, int instanceId = -1)
		{
			ThrowExceptionIfKrilloudIsNotInitialized();

			float result = 0;

			Log("EX_{0}(varName: {1}, instanceId: {2})", nameof(m_engine.GetVariableValue), varName, instanceId);
			m_engine.GetVariableValue(varName, instanceId, ref result);

			return result;
		}

		internal bool GetBoolVar(string varName, int instanceId = -1)
		{
			ThrowExceptionIfKrilloudIsNotInitialized();

			bool result = false;

			Log("EX_{0}(varName: {1}, instanceId: {2})", nameof(m_engine.GetVariableValue), varName, instanceId);
			m_engine.GetVariableValue(varName, instanceId, ref result);

			return result;
		}

		internal void SetIntVar(string varName, int value, int instanceId = -1)
		{
			ThrowExceptionIfKrilloudIsNotInitialized();

			Log("EX_{0}(varName: {1}, value: {2}, instanceId: {3})", nameof(m_engine.SetVariableValue), varName, value, instanceId);
			m_engine.SetVariableValue(varName, instanceId, value);
		}

		internal void SetFloatVar(string varName, float value, int instanceId = -1)
		{
			ThrowExceptionIfKrilloudIsNotInitialized();

			Log("EX_{0}(varName: {1}, value: {2}, instanceId: {3})", nameof(m_engine.SetVariableValue), varName, value, instanceId);
			m_engine.SetVariableValue(varName, instanceId, value);
		}

		internal void SetBoolVar(string varName, bool value, int instanceId = -1)
		{
			ThrowExceptionIfKrilloudIsNotInitialized();

			Log("EX_{0}(varName: {1}, value: {2}, instanceId: {3})", nameof(m_engine.SetVariableValue), varName, value, instanceId);
			m_engine.SetVariableValue(varName, instanceId, value);
		}

		internal void Play(string tagName, int instanceId)
		{
			if (m_applicationQuit)
			{
				Log("Application is quitting, ignoring Play(tagName: {0}, instanceId: {1})", tagName, instanceId);
				return;
			}

			ThrowExceptionIfKrilloudIsNotInitialized();

			Log("EX_{0}(tagName: {1}, instanceId: {2})", nameof(m_engine.Play), tagName, instanceId);
			m_engine.Play(tagName, instanceId);
		}

		internal void Stop(string tagName, int instanceId = -1)
		{
			if (m_applicationQuit)
			{
				Log("Application is quitting, ignoring Stop(tagName: {0}, instanceId: {1})", tagName, instanceId);
				return;
			}

			ThrowExceptionIfKrilloudIsNotInitialized();

			Log("EX_{0}(tagName: {1}, instanceId: {2})", nameof(m_engine.Stop), tagName, instanceId);
			m_engine.Stop(tagName, instanceId);
		}

		internal void Stop(KLAudioSource source)
		{
			if (m_applicationQuit)
			{
				Log("Application is quitting, ignoring Stop({0}, instanceId: {1})", source.name, source.InstanceID);
				return;
			}

			ThrowExceptionIfKrilloudIsNotInitialized();

			Log("EX_{0}(tagCount: {1}, instanceId: {2})", nameof(m_engine.StopAllIstancesOfTag), source.tag.Length, source.InstanceID);
			foreach (var tag in source.Tags)
			{
				m_engine.StopAllIstancesOfTag(tag, source.InstanceID);
			}
		}

		internal void StopAll()
		{
			if (m_applicationQuit)
			{
				Log("Application is quitting, ignoring StopAll()");
				return;
			}

			ThrowExceptionIfKrilloudIsNotInitialized();

			Log("EX_{0}()", nameof(m_engine.StopAll));
			m_engine.StopAll();
		}

		internal bool IsPlaying(string tagName, int instanceId)
		{
			if (m_applicationQuit)
			{
				Log("Application is quitting, ignoring StopAll()");
				return false;
			}

			ThrowExceptionIfKrilloudIsNotInitialized();

			bool result = false;

			result = m_engine.IsPlaying(tagName, instanceId);

			return result;
		}

		internal void SetObjectPosition(int instanceId, Vector3 position)
		{
			SetObjectPosition(instanceId, position, Vector3.zero);
		}

		internal void SetObjectPosition(int instanceId, Vector3 pos, Vector3 vel)
		{
			if (m_applicationQuit)
			{
				Log("Application is quitting, ignoring SetObjectPosition(instanceId: {0}, pos: {1}, vel: {2})", instanceId, pos, vel);
				return;
			}

			ThrowExceptionIfKrilloudIsNotInitialized();

			try
			{
				m_engine.SetGameObjectPosition(instanceId, pos.x, pos.y, pos.z, vel.x, vel.y, vel.z);
			}
			catch (Exception e)
			{
				LogError(e);
			}

			// Log("UpdateObjectPosition(instanceId: {0}, pos: {1}, vel: {2})", instanceId, pos, vel);
		}

		internal void SetListenerPosition(Vector3 pos, Vector3 fwd, Vector3 up, Vector3 vel)
		{
			if (m_applicationQuit)
			{
				Log("Application is quitting, ignoring SetListenerPosition(pos: {0}, fwd: {1}, up: {2}, vel: {3})", pos, fwd, up, vel);
				return;
			}

			ThrowExceptionIfKrilloudIsNotInitialized();

			try
			{
				m_engine.SetListenerPosition(pos.x, pos.y, pos.z, fwd.x, fwd.y, fwd.z, up.x, up.y, up.z, vel.x, vel.y, vel.z);
			}
			catch (Exception e)
			{
				LogError(e);
			}

			// Log("UpdateListenerPosition(pos: {0}, fwd: {1}, up: {2}, vel: {3})", pos, fwd, up, vel);
		}

		/// <summary>
		/// Set channel volume
		/// </summary>
		public static void SetChannelVolume(string channelName, float volume)
		{
			if (m_instance == null || m_instance.m_engine == null)
			{
				return;
			}

			var krilloudEngine = m_instance.m_engine;
			
			volume = Mathf.Clamp01(volume);

			Log("EX_{0}(channelId: {1}, volume: {2}", nameof(krilloudEngine.SetChannelVolume), channelName, volume);
			krilloudEngine.SetChannelVolume(channelName, volume);
		}

		/// <summary>
		/// Get channel volume
		/// </summary>
		public static float GetChannelVolume(string channelName)
		{
			if (m_instance == null || m_instance.m_engine == null)
			{
				return -1;
			}
			
			return m_instance.m_engine.GetChannelVolume(channelName);
		}

		#endregion Internal API

		#region Private API

		private bool IsKrilloudPausedInternal()
		{
			if (m_applicationQuit)
			{
				Log("Application is quitting, ignoring IsKrilloudPaused()");
				return false;
			}

			ThrowExceptionIfKrilloudIsNotInitialized();

			bool result = false;

			Log("EX_{0}()", nameof(m_engine.IsKrilloudPaused));
			result = m_engine.IsKrilloudPaused();

			return result;
		}

		private void PauseKrilloudInternal()
		{
			if (m_applicationQuit)
			{
				Log("Application is quitting, ignoring PauseKrilloudEngine()");
				return;
			}

			ThrowExceptionIfKrilloudIsNotInitialized();

			if (IsKrilloudPaused()) return;

			Log("EX_{0}()", nameof(m_engine.PauseKrilloud));
			m_engine.PauseKrilloud();
		}

		private void ResumeKrilloudInternal()
		{
			if (m_applicationQuit)
			{
				Log("Application is quitting, ignoring ResumeKrilloudEngine()");
				return;
			}

			ThrowExceptionIfKrilloudIsNotInitialized();

			if (!IsKrilloudPaused()) return;

			Log("EX_{0}()", nameof(m_engine.PauseKrilloud));
			m_engine.PauseKrilloud();
		}

		#endregion Private API

		#region Helpers

		private void ThrowExceptionIfKrilloudIsNotInitialized()
		{
			if (!Initialized)
			{
				throw new KrilloudNotInitializedException();
			}
		}

		/// <summary>
		/// Initialize sound engine
		/// </summary>
		private void Init()
		{
			if (Initialized)
			{
				LogError("KrilloudEngine is initialized!");
				return;
			}

			Log("Initializing Krilloud...");

			m_engine = new Krilloud(KLUtils.KRILLOUD_PROJECT_PATH);
			m_engine.Init();

			if (KLSettings.Instance.krilloudInDebugMode)
			{
				Log("Enabled debug mode for Krilloud");
				m_engine.SetDebugStatus(KLSettings.Instance.krilloudInDebugMode);
			}

			Initialized = true;

			Log("Krilloud initialized!");
		}

		/// <summary>
		/// Shutdown sound engine
		/// </summary>
		private void Deinit()
		{
			ThrowExceptionIfKrilloudIsNotInitialized();

			StopAll();

			Log("Deinitializing Krilloud...");

			m_engine.Deinit();
			m_engine = null;
			Initialized = false;

			Log("Krilloud deinitialized!");
		}

		#endregion Helpers

		#region Helpers (Log)

		private static void Log(object message)
		{
			if (Verbose) KLStartup.Logger.Log("<b>[KLCenter]</b> - " + message);
		}

		private static void Log(object message, params object[] args)
		{
			Log(string.Format(message.ToString(), args));
		}

		private static void LogWarning(object message)
		{
			KLStartup.Logger.LogWarning("<b>[KLCenter]</b> - " + message);
		}

		private static void LogWarning(object message, params object[] args)
		{
			LogWarning(string.Format(message.ToString(), args));
		}

		private static void LogError(object message)
		{
			KLStartup.Logger.LogError("<b>[KLCenter]</b> - " + message);
		}

		private static void LogError(object message, params object[] args)
		{
			LogError(string.Format(message.ToString(), args));
		}

		#endregion Helpers (Log)        
	}

}