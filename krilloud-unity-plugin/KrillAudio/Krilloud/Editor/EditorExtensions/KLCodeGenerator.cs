using System;
using System.IO;
using System.Security;
using System.Text;
using KrillAudio.Krilloud.Definitions;
using KrillAudio.Krilloud.Services;
using UnityEngine;

namespace KrillAudio.Krilloud.Editor
{
	public static class KLCodeGenerator
	{
		public const string BASE_CLASS_NAME = "KL";

		private static string m_dataPath;
		private static string ApplicationDataPath
		{
			get
			{
				if (string.IsNullOrEmpty(m_dataPath)) m_dataPath = Application.dataPath;
				return m_dataPath;
			}
		}

		private static string KRILLOUD_AUTOGEN_FOLDER_LOCAL_PATH
		{
			get { return Path.Combine("KrillAudio", "Krilloud"); }
		}

		private static string KRILLOUD_AUTOGEN_FOLDER_GLOBAL_PATH
		{
			get
			{
				return Path.Combine(ApplicationDataPath, KRILLOUD_AUTOGEN_FOLDER_LOCAL_PATH);
			}
		}

		public static string KRILLOUD_AUTOGENERATED_CODE_LOCAL_PATH
		{
			get { return Path.Combine(KRILLOUD_AUTOGEN_FOLDER_LOCAL_PATH, "AUTOGEN_" + BASE_CLASS_NAME + ".cs"); }
		}

		public static string KRILLOUD_AUTOGENERATED_CODE_GLOBAL_PATH
		{
			get { return Path.Combine(ApplicationDataPath, KRILLOUD_AUTOGENERATED_CODE_LOCAL_PATH); }
		}

		public static void GenerateCode()
		{
			KLCodeWriter cw = new KLCodeWriter();

			KLStartup.Logger.Log("<b>[KLCodeGenerator]</b> Autogenerating code");

			AutoGenerateHeader(cw);
			cw.WriteSpace();
			GenerateBaseClass(cw);

			WriteCodeToFile(cw.ToString());
		}

		#region Write generation

		private static void AutoGenerateHeader(KLCodeWriter cw)
		{
			cw.WriteLine("// This is an Autogenerated code, don't touch!");
		}

		private static void GenerateBaseClass(KLCodeWriter cw)
		{
			cw.WriteLine("namespace KrillAudio.Krilloud");
			cw.BeginBracket();

			cw.WriteLine("public class " + BASE_CLASS_NAME);
			cw.BeginBracket();

			GenerateTagClass(cw);
			cw.WriteSpace();
			GenerateVariablesClass(cw);
			cw.WriteSpace();
			GenerateChannelClass(cw);
			
			cw.EndBracket();

			cw.EndBracket();
		}

		private static void GenerateTagClass(KLCodeWriter cw)
		{
			cw.WriteLine("public class Tags");
			cw.BeginBracket();

			foreach (var tag in KLEditorCore.AvailableTags)
			{
				if (string.IsNullOrEmpty(tag.name))
					continue;
				
				GenerateTagConstant(cw, tag);
				cw.WriteSpace();
			}

			cw.EndBracket();
		}

		private static void GenerateTagConstant(KLCodeWriter cw, KLTagDefinition tag)
		{
			string tagConstantName = GetTagConstantName(tag.name);

			GenerateTagSummary(cw, tag);

			if (tag.sourceContract != SourceContract.Krilloud)
				cw.WriteLine("[System.Obsolete(\"{0}\")]", tag.sourceContract);

			cw.WriteLine(string.Format("public const string {0} = \"{1}\";", tagConstantName, tag.name));
		}

		private static void GenerateTagSummary(KLCodeWriter cw, KLTagDefinition tag)
		{
			cw.WriteLine("/// <summary>");

			cw.WriteLine("/// Tag: {0}", tag.name);

			if (!string.IsNullOrEmpty(tag.description))
			{
				string description = SecurityElement.Escape(tag.description);
				cw.WriteLine("/// " + description);
			}

			cw.WriteLine("/// {0}", tag.is3D ? "3D" : "2D");

			cw.WriteLine("/// </summary>");
		}

		private static void GenerateVariablesClass(KLCodeWriter cw)
		{
			cw.WriteLine("public class Variables");
			cw.BeginBracket();

			foreach (var variable in KLEditorCore.AvailableVariables)
			{
				if (string.IsNullOrEmpty(variable.name))
					continue;
				
				GenerateVariableConstant(cw, variable);
				cw.WriteSpace();
			}

			cw.EndBracket();
		}

		private static void GenerateVariableConstant(KLCodeWriter cw, KLVariableDefinition variable)
		{
			string variableName = GetTagConstantName(variable.name);

			GenerateVariableSummary(cw, variable);

			if (variable.sourceContract == SourceContract.Placeholder)
				cw.WriteLine("[System.Obsolete({0})]", "\"Placeholder\"");

			cw.WriteLine(string.Format("public const string {0} = \"{1}\";", variableName, variable.name));
		}

		private static void GenerateVariableSummary(KLCodeWriter cw, KLVariableDefinition variable)
		{
			cw.WriteLine("/// <summary>");
			cw.WriteLine("/// Variable: {0}", variable.name);
			cw.WriteLine("/// Range: [{0} - {1}]", variable.min, variable.max);
			cw.WriteLine("/// Type: {0}", variable.isGlobal ? "Global" : "Local");
			cw.WriteLine("/// </summary>");
		}

		private static void GenerateChannelClass(KLCodeWriter cw)
		{
			cw.WriteLine("public class Channels");
			cw.BeginBracket();

			foreach (var channel in KLEditorCore.AvailableChannels)
			{
				if (string.IsNullOrEmpty(channel.name))
					continue;
				
				GenerateChannelConstant(cw, channel);
				cw.WriteSpace();
			}

			cw.EndBracket();
		}

		private static void GenerateChannelConstant(KLCodeWriter cw, KLChannelDefinition channel)
		{
			string variableName = GetTagConstantName(channel.name);
			cw.WriteLine(string.Format("public const string {0} = \"{1}\";", variableName, channel.name));
		}

		#endregion Write generation

		#region Helpers

		private static string GetTagConstantName(string tagName)
		{
			string result = tagName.Replace('/', '_');
			result = result.Replace(" ", "_");
			result = result.Replace("\n", "_");

			// Remove numbers in start character
			for (var i = 0; i < 9; i++)
			{
				if (result.StartsWith(i.ToString()))
				{
					result = "_" + result;
					break;
				}
			}

			return result;
		}

		private static void WriteCodeToFile(string code)
		{
			var filePath = KRILLOUD_AUTOGENERATED_CODE_GLOBAL_PATH;

			// Check directory
			try
			{
				if (!Directory.Exists(KRILLOUD_AUTOGEN_FOLDER_GLOBAL_PATH))
				{
					Directory.CreateDirectory(KRILLOUD_AUTOGEN_FOLDER_GLOBAL_PATH);
				}

				//using (StreamWriter sw = new StreamWriter(KRILLOUD_AUTOGENERATED_CODE_PATH))
				//{
				//	sw.Write(code);
				//}
				File.WriteAllText(filePath, code, Encoding.UTF8);
			}
			catch (Exception e)
			{
				KLStartup.Logger.LogError(e);
			}
		}

		#endregion Helpers
	}

	public class KLCodeWriter
	{
		private StringBuilder builder;
		private uint indentLevel = 0;

		public KLCodeWriter()
		{
			builder = new StringBuilder();
			indentLevel = 0;
		}

		public void WriteLine(string line)
		{
			builder.AppendLine(GetIndentText() + line);
		}

		public void WriteLine(string line, params object[] args)
		{
			WriteLine(string.Format(line, args));
		}

		public void WriteSpace()
		{
			builder.AppendLine();
		}

		public void BeginIndent()
		{
			indentLevel++;
		}

		public void EndIndent()
		{
			indentLevel--;
		}

		public void BeginBracket()
		{
			WriteLine("{");
			BeginIndent();
		}

		public void EndBracket()
		{
			EndIndent();
			WriteLine("}");
		}

		private string GetIndentText()
		{
			string r = "";
			for (var i = 0; i < indentLevel; i++)
			{
				r += "\t";
			}
			return r;
		}

		public override string ToString()
		{
			return builder.ToString();
		}
	}
}